
public abstract class Token {
	protected byte x;
	protected byte y;
	protected int points;
	protected boolean isVisible;
	protected boolean inGame;
	
	
	Token(byte x, byte y,int points,boolean isVisible)
	{
		this.x = x;
		this.y = y;
		this.points = points;
		this.isVisible = isVisible;
		inGame = true;
	}
	
	public byte getX() {
		return x;
	}

	public void setX(byte x) {
		this.x = x;
	}

	public byte getY() {
		return y;
	}

	public void setY(byte y) {
		this.y = y;
	}

	boolean getVisibility() {
		return isVisible;
	}
	
	boolean getInGame() {
		return inGame;
	}
	
	protected abstract boolean moveAllowed (byte vectorX, byte vectorY);
	
	public void moveTokenTowards (byte vectorX, byte vectorY) {
		if (moveAllowed(vectorX,vectorY) && inGame == true){
			this.x += vectorX;
			this.y += vectorY;
		}
		else if 
			if (this.x < 0 || this.y <0 || this.x > playboard.getBase() + 2 ||  this.y > playboard.getBase() + 2  ) {
				inGame = false;
				//TODO: increaseScore of player whose shape was before
			
		}
		else{
			System.out.print("Move not allowed");
		}
	}


public class NeutralToken extends Token {
	NeutralToken(byte x, byte y,int points,boolean isVisible) {
		super(x,y, points, isVisible);
	}
	
	protected boolean moveAllowed (byte vectorX, byte vectorY) {
		{
			if (playboard.emptyFieldFrom(x, y, vectorX, vectorY))
				return true;
			
			else if	(vectorX == 1 && x == playboard.getbase()) 
				if(playboard.whichKindOfTokenOn(x+vectorX,y+vectorY) instanceof NeutralToken) 
					return false;
			
			else if	(vectorX == -1 && x == 1);
				if(playboard.whichKindOfTokenOn(x+vectorX, y+vectorY) instanceof NeutralToken) 
					return false;
				
			else if (vectorY == 1 && y = playboard.getbase());
				if(playboard.whichKindOfTokenOn(x+vectorX, y+vectorY) instanceof NeutralToken) 
					return false;
				
			else if (vectorY == -1&& y == 1);
				if(playboard.whichKindOfTokenOn(x+vectorX, y+vectorY) instanceof NeutralToken) 
					return false;
				

			else return true;
		}
		
	}
}


public abstract class ShapedToken extends Token {
	Player affinity;
	
	ShapedToken(int points, boolean isVisible, Player affinity){
		super(points ,isVisible);
		this.affinity= affinity;
	}
	
	protected abstract boolean moveAllowed (byte x, byte y);
  }
  
public class SquareToken extends ShapedToken {

	public SquareToken () {
		super();
	}
}

public class TriangleToken extends ShapedToken {
	
	public TriangleToken () {
		super();
	}
}

public class CircleToken extends ShapedToken {
	
	public CircleToken() {
		super();
	}
}

public class StarToken extends ShapedToken {

	public StarToken() {
		super();
	}
}
